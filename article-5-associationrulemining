{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9ca3b37",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:02.635884Z",
     "iopub.status.busy": "2025-07-04T08:17:02.634867Z",
     "iopub.status.idle": "2025-07-04T08:17:04.590162Z",
     "shell.execute_reply": "2025-07-04T08:17:04.589198Z"
    },
    "papermill": {
     "duration": 1.962584,
     "end_time": "2025-07-04T08:17:04.592043",
     "exception": false,
     "start_time": "2025-07-04T08:17:02.629459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/real-market-data/market.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b2c5b49",
   "metadata": {
    "papermill": {
     "duration": 0.003039,
     "end_time": "2025-07-04T08:17:04.599092",
     "exception": false,
     "start_time": "2025-07-04T08:17:04.596053",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c6b96574",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:04.607565Z",
     "iopub.status.busy": "2025-07-04T08:17:04.606705Z",
     "iopub.status.idle": "2025-07-04T08:17:06.597577Z",
     "shell.execute_reply": "2025-07-04T08:17:06.596646Z"
    },
    "papermill": {
     "duration": 1.996866,
     "end_time": "2025-07-04T08:17:06.599289",
     "exception": false,
     "start_time": "2025-07-04T08:17:04.602423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt \n",
    "import matplotlib as mpl\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8d152861",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:06.607639Z",
     "iopub.status.busy": "2025-07-04T08:17:06.607205Z",
     "iopub.status.idle": "2025-07-04T08:17:06.634963Z",
     "shell.execute_reply": "2025-07-04T08:17:06.633966Z"
    },
    "papermill": {
     "duration": 0.03408,
     "end_time": "2025-07-04T08:17:06.637019",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.602939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from mlxtend.frequent_patterns import apriori, association_rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "65a6a112",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:06.645182Z",
     "iopub.status.busy": "2025-07-04T08:17:06.644895Z",
     "iopub.status.idle": "2025-07-04T08:17:06.690394Z",
     "shell.execute_reply": "2025-07-04T08:17:06.689517Z"
    },
    "papermill": {
     "duration": 0.051419,
     "end_time": "2025-07-04T08:17:06.691996",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.640577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bread</th>\n",
       "      <th>Honey</th>\n",
       "      <th>Bacon</th>\n",
       "      <th>Toothpaste</th>\n",
       "      <th>Banana</th>\n",
       "      <th>Apple</th>\n",
       "      <th>Hazelnut</th>\n",
       "      <th>Cheese</th>\n",
       "      <th>Meat</th>\n",
       "      <th>Carrot</th>\n",
       "      <th>...</th>\n",
       "      <th>Milk</th>\n",
       "      <th>Butter</th>\n",
       "      <th>ShavingFoam</th>\n",
       "      <th>Salt</th>\n",
       "      <th>Flour</th>\n",
       "      <th>HeavyCream</th>\n",
       "      <th>Egg</th>\n",
       "      <th>Olive</th>\n",
       "      <th>Shampoo</th>\n",
       "      <th>Sugar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bread  Honey  Bacon  Toothpaste  Banana  Apple  Hazelnut  Cheese  Meat  \\\n",
       "0      1      0      1           0       1      1         1       0     0   \n",
       "1      1      1      1           0       1      1         1       0     0   \n",
       "2      0      1      1           1       1      1         1       1     1   \n",
       "3      1      1      0           1       0      1         0       0     0   \n",
       "4      0      1      0           0       0      0         0       0     0   \n",
       "\n",
       "   Carrot  ...  Milk  Butter  ShavingFoam  Salt  Flour  HeavyCream  Egg  \\\n",
       "0       1  ...     0       0            0     0      0           1    1   \n",
       "1       0  ...     1       1            0     0      1           0    0   \n",
       "2       0  ...     1       0            1     1      1           1    1   \n",
       "3       0  ...     1       0            0     0      1           0    1   \n",
       "4       0  ...     0       0            0     0      0           0    0   \n",
       "\n",
       "   Olive  Shampoo  Sugar  \n",
       "0      0        0      1  \n",
       "1      1        1      0  \n",
       "2      0        0      1  \n",
       "3      1        1      0  \n",
       "4      0        0      0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw = pd.read_csv(\"/kaggle/input/real-market-data/market.csv\",sep=\";\")\n",
    "df_raw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c2425ce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:06.700851Z",
     "iopub.status.busy": "2025-07-04T08:17:06.700468Z",
     "iopub.status.idle": "2025-07-04T08:17:06.720524Z",
     "shell.execute_reply": "2025-07-04T08:17:06.719497Z"
    },
    "papermill": {
     "duration": 0.025932,
     "end_time": "2025-07-04T08:17:06.721930",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.695998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bread</th>\n",
       "      <th>Honey</th>\n",
       "      <th>Bacon</th>\n",
       "      <th>Toothpaste</th>\n",
       "      <th>Banana</th>\n",
       "      <th>Apple</th>\n",
       "      <th>Hazelnut</th>\n",
       "      <th>Cheese</th>\n",
       "      <th>Meat</th>\n",
       "      <th>Carrot</th>\n",
       "      <th>...</th>\n",
       "      <th>Milk</th>\n",
       "      <th>Butter</th>\n",
       "      <th>ShavingFoam</th>\n",
       "      <th>Salt</th>\n",
       "      <th>Flour</th>\n",
       "      <th>HeavyCream</th>\n",
       "      <th>Egg</th>\n",
       "      <th>Olive</th>\n",
       "      <th>Shampoo</th>\n",
       "      <th>Sugar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Bread  Honey  Bacon  Toothpaste  Banana  Apple  Hazelnut  Cheese   Meat  \\\n",
       "0   True  False   True       False    True   True      True   False  False   \n",
       "1   True   True   True       False    True   True      True   False  False   \n",
       "2  False   True   True        True    True   True      True    True   True   \n",
       "3   True   True  False        True   False   True     False   False  False   \n",
       "4  False   True  False       False   False  False     False   False  False   \n",
       "\n",
       "   Carrot  ...   Milk  Butter  ShavingFoam   Salt  Flour  HeavyCream    Egg  \\\n",
       "0    True  ...  False   False        False  False  False        True   True   \n",
       "1   False  ...   True    True        False  False   True       False  False   \n",
       "2   False  ...   True   False         True   True   True        True   True   \n",
       "3   False  ...   True   False        False  False   True       False   True   \n",
       "4   False  ...  False   False        False  False  False       False  False   \n",
       "\n",
       "   Olive  Shampoo  Sugar  \n",
       "0  False    False   True  \n",
       "1   True     True  False  \n",
       "2  False    False   True  \n",
       "3   True     True  False  \n",
       "4  False    False  False  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df_raw.astype(bool)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d46ca402",
   "metadata": {
    "papermill": {
     "duration": 0.003474,
     "end_time": "2025-07-04T08:17:06.729467",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.725993",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Metric in Association Rule Mining"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24709aea",
   "metadata": {
    "papermill": {
     "duration": 0.00342,
     "end_time": "2025-07-04T08:17:06.736692",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.733272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### What Does \"Support\" Really Mean?\n",
    "When we're trying to find patterns in user behavior — like what people buy or watch together — support is the first signal we look for. Think of it as a popularity score: it tells us how often a certain combination of items shows up across all transactions (or in the case of Netflix, maybe across millions of viewing sessions).\n",
    "\n",
    "📊 For example, if 100 people made purchases and 25 of them bought both eggs and milk, then the support for that itemset is 25%.\n",
    "\n",
    "In simple terms:\n",
    "Support of itemset = (Number of times an itemset appears) ÷ (Total number of transactions)\n",
    "\n",
    "Why does this matter?\n",
    "High support means the itemset is common — and worth paying attention to.\n",
    "Low support patterns are often too rare to matter in large-scale recommendations.\n",
    "For product teams or marketers, support helps surface the popular combos that drive user engagement or purchases.\n",
    "\n",
    "In a streaming context? That’s like noticing Stranger Things and Dark are often binged together — and using that signal to improve recommendations or playlist curation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42172375",
   "metadata": {
    "papermill": {
     "duration": 0.003476,
     "end_time": "2025-07-04T08:17:06.743821",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.740345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### What Is \"Confidence\" in Association Rule Mining?\n",
    "Let’s say we’ve already found that certain items tend to show up together — but how reliable is that pattern? That’s where the confidence metric comes in.\n",
    "\n",
    "Confidence tells us:\n",
    "\n",
    "“If item A appears, how likely is item B to appear as well?”\n",
    "\n",
    "It’s essentially a probability score. For example, if 100 people buy bread, and 70 of them also buy butter, the confidence of the rule Bread → Butter is 70%.\n",
    "\n",
    "Formula:\n",
    "Confidence(A → B) = Support(A and B) ÷ Support(A)\n",
    "\n",
    "📈 Why Confidence Matters\n",
    "It’s predictive: The higher the confidence, the more trustworthy the rule. In retail or streaming, it means the behavior isn’t just a coincidence.\n",
    "\n",
    "It ranks rules: Not all item pairs are equal — confidence helps us separate the strong signals from the noise.\n",
    "\n",
    "It fuels recommendations: In a Netflix-like setting, if you watched Stranger Things, and there’s high confidence you’ll also enjoy Dark, the system can confidently recommend it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd21ef7",
   "metadata": {
    "papermill": {
     "duration": 0.003575,
     "end_time": "2025-07-04T08:17:06.751054",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.747479",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### What Does “Lift” Tell Us?\n",
    "While confidence tells us how likely two items appear together, lift goes a step further — it tells us whether that co-occurrence is actually interesting, or just a coincidence.\n",
    "\n",
    "Think of lift as a way to measure the \"surprise factor\" in a pattern.\n",
    "\n",
    "Lift = (Support of A and B together) ÷ (Support of A × Support of B)\n",
    "\n",
    "If items A and B were totally unrelated, we’d expect them to occur together purely by chance. But if the lift is greater than 1, it means they show up together more often than random chance would suggest — a strong signal for a recommendation.\n",
    "\n",
    "🔎 Why Lift Matters\n",
    "\n",
    "* ✅ Lift > 1 → Positive association: “People who buy A really are more likely to buy B.”\n",
    "* ⚖️ Lift ≈ 1 → No real relationship: The items appear together as often as chance allows.\n",
    "* 🚫 Lift < 1 → Negative association: Buying A actually lowers the chance of B being bought."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "779f33fe",
   "metadata": {
    "papermill": {
     "duration": 0.003381,
     "end_time": "2025-07-04T08:17:06.758135",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.754754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#  Run the Apriori Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6720922a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:06.766753Z",
     "iopub.status.busy": "2025-07-04T08:17:06.766393Z",
     "iopub.status.idle": "2025-07-04T08:17:07.423216Z",
     "shell.execute_reply": "2025-07-04T08:17:07.422104Z"
    },
    "papermill": {
     "duration": 0.662975,
     "end_time": "2025-07-04T08:17:07.424833",
     "exception": false,
     "start_time": "2025-07-04T08:17:06.761858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>itemsets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.448276</td>\n",
       "      <td>(Banana)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.443966</td>\n",
       "      <td>(Cheese)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.431034</td>\n",
       "      <td>(Bacon)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.420259</td>\n",
       "      <td>(Hazelnut)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.415948</td>\n",
       "      <td>(Honey)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    support    itemsets\n",
       "4  0.448276    (Banana)\n",
       "7  0.443966    (Cheese)\n",
       "2  0.431034     (Bacon)\n",
       "6  0.420259  (Hazelnut)\n",
       "1  0.415948     (Honey)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minimum support of 0.2 = itemsets present in at least 20% of transactions\n",
    "\n",
    "min_support = 0.02\n",
    "frequent_itemsets = apriori(df, min_support=min_support, use_colnames=True)\n",
    "frequent_itemsets.sort_values(by='support', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b730056f",
   "metadata": {
    "papermill": {
     "duration": 0.003661,
     "end_time": "2025-07-04T08:17:07.432616",
     "exception": false,
     "start_time": "2025-07-04T08:17:07.428955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Generate Association Rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "992ae12d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:07.442249Z",
     "iopub.status.busy": "2025-07-04T08:17:07.441935Z",
     "iopub.status.idle": "2025-07-04T08:17:17.157289Z",
     "shell.execute_reply": "2025-07-04T08:17:17.156153Z"
    },
    "papermill": {
     "duration": 9.722102,
     "end_time": "2025-07-04T08:17:17.159145",
     "exception": false,
     "start_time": "2025-07-04T08:17:07.437043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>782193</th>\n",
       "      <td>Meat, Cheese, Egg</td>\n",
       "      <td>Carrot, Honey, Apple, Hazelnut, Bacon</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.208333</td>\n",
       "      <td>8.055556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782016</th>\n",
       "      <td>Carrot, Honey, Apple, Hazelnut, Bacon</td>\n",
       "      <td>Meat, Cheese, Egg</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>8.055556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782102</th>\n",
       "      <td>Carrot, Meat, Cheese, Egg</td>\n",
       "      <td>Honey, Apple, Hazelnut, Bacon</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.344828</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782107</th>\n",
       "      <td>Honey, Apple, Hazelnut, Bacon</td>\n",
       "      <td>Carrot, Meat, Cheese, Egg</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.476190</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782087</th>\n",
       "      <td>Carrot, Bacon, Apple, Hazelnut</td>\n",
       "      <td>Honey, Cheese, Egg, Meat</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.476190</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782122</th>\n",
       "      <td>Honey, Cheese, Egg, Meat</td>\n",
       "      <td>Carrot, Bacon, Apple, Hazelnut</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.344828</td>\n",
       "      <td>7.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782139</th>\n",
       "      <td>Meat, Cheese, Egg, Bacon</td>\n",
       "      <td>Carrot, Honey, Apple, Hazelnut</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.303030</td>\n",
       "      <td>7.400319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782070</th>\n",
       "      <td>Carrot, Honey, Apple, Hazelnut</td>\n",
       "      <td>Meat, Cheese, Egg, Bacon</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.526316</td>\n",
       "      <td>7.400319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782095</th>\n",
       "      <td>Carrot, Cheese, Hazelnut, Meat</td>\n",
       "      <td>Honey, Apple, Egg, Bacon</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>7.138462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782114</th>\n",
       "      <td>Honey, Apple, Egg, Bacon</td>\n",
       "      <td>Carrot, Cheese, Hazelnut, Meat</td>\n",
       "      <td>0.021552</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>7.138462</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  antecedents  \\\n",
       "782193                      Meat, Cheese, Egg   \n",
       "782016  Carrot, Honey, Apple, Hazelnut, Bacon   \n",
       "782102              Carrot, Meat, Cheese, Egg   \n",
       "782107          Honey, Apple, Hazelnut, Bacon   \n",
       "782087         Carrot, Bacon, Apple, Hazelnut   \n",
       "782122               Honey, Cheese, Egg, Meat   \n",
       "782139               Meat, Cheese, Egg, Bacon   \n",
       "782070         Carrot, Honey, Apple, Hazelnut   \n",
       "782095         Carrot, Cheese, Hazelnut, Meat   \n",
       "782114               Honey, Apple, Egg, Bacon   \n",
       "\n",
       "                                  consequents   support  confidence      lift  \n",
       "782193  Carrot, Honey, Apple, Hazelnut, Bacon  0.021552    0.208333  8.055556  \n",
       "782016                      Meat, Cheese, Egg  0.021552    0.833333  8.055556  \n",
       "782102          Honey, Apple, Hazelnut, Bacon  0.021552    0.344828  7.619048  \n",
       "782107              Carrot, Meat, Cheese, Egg  0.021552    0.476190  7.619048  \n",
       "782087               Honey, Cheese, Egg, Meat  0.021552    0.476190  7.619048  \n",
       "782122         Carrot, Bacon, Apple, Hazelnut  0.021552    0.344828  7.619048  \n",
       "782139         Carrot, Honey, Apple, Hazelnut  0.021552    0.303030  7.400319  \n",
       "782070               Meat, Cheese, Egg, Bacon  0.021552    0.526316  7.400319  \n",
       "782095               Honey, Apple, Egg, Bacon  0.021552    0.400000  7.138462  \n",
       "782114         Carrot, Cheese, Hazelnut, Meat  0.021552    0.384615  7.138462  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n",
    "\n",
    "# Make the antecedents and consequents readable\n",
    "rules['antecedents'] = rules['antecedents'].apply(lambda x: ', '.join(list(x)))\n",
    "rules['consequents'] = rules['consequents'].apply(lambda x: ', '.join(list(x)))\n",
    "\n",
    "rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']].sort_values(by='lift', ascending=False).head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f361c8c",
   "metadata": {
    "papermill": {
     "duration": 0.003859,
     "end_time": "2025-07-04T08:17:17.167557",
     "exception": false,
     "start_time": "2025-07-04T08:17:17.163698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Visualize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "354af871",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T08:17:17.177155Z",
     "iopub.status.busy": "2025-07-04T08:17:17.176828Z",
     "iopub.status.idle": "2025-07-04T08:17:18.587946Z",
     "shell.execute_reply": "2025-07-04T08:17:18.586980Z"
    },
    "papermill": {
     "duration": 1.418007,
     "end_time": "2025-07-04T08:17:18.589618",
     "exception": false,
     "start_time": "2025-07-04T08:17:17.171611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "top_rules = rules.head(10)\n",
    "G = nx.DiGraph()\n",
    "\n",
    "for _, row in top_rules.iterrows():\n",
    "    G.add_edge(row['antecedents'], row['consequents'], weight=row['lift'])\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "pos = nx.spring_layout(G, k=0.5)\n",
    "nx.draw(G, pos, with_labels=True, node_color='lightgreen', node_size=3000, font_size=10, font_weight='bold')\n",
    "labels = nx.get_edge_attributes(G, 'weight')\n",
    "nx.draw_networkx_edge_labels(G, pos, edge_labels={k: f\"{v:.2f}\" for k, v in labels.items()})\n",
    "plt.title(\"Top Association Rules Network\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27c6f3be",
   "metadata": {
    "papermill": {
     "duration": 0.004821,
     "end_time": "2025-07-04T08:17:18.600064",
     "exception": false,
     "start_time": "2025-07-04T08:17:18.595243",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Final Thoughts: What Did the Network Tell Us?\n",
    "From the association rule mining analysis, Bread clearly emerged as a central item — consistently linked with several others like Honey, Bacon, Toothpaste, Banana, and Apple.\n",
    "\n",
    "Each arrow in the network diagram shows a rule such as:\n",
    "\n",
    "Bread → Honey (Lift: 1.18)\n",
    "Meaning: Customers who bought bread were 18% more likely to also buy honey — beyond what you'd expect by chance.\n",
    "\n",
    "While some associations (like Bread → Apple with Lift 1.06) are relatively weak, others like Bread → Banana (Lift 1.16) suggest a stronger-than-random relationship.\n",
    "\n",
    "### 🛒 Business Takeaways\n",
    "Product bundling: Bread and banana could be placed near each other or promoted together.\n",
    "\n",
    "Cross-sell opportunities: Even items like Toothpaste paired with bread (Lift 1.12) can hint at broader shopping behaviors — think of shared time-of-day purchases (morning routines).\n",
    "\n",
    "Data-driven merchandising: These micro-patterns can be turned into real-world decisions — shelf placements, combo offers, or \"frequently bought together\" nudges.\n",
    "\n",
    "This analysis showcases how even a small retail dataset can surface meaningful insights — and how Lift + Confidence + Support together help us distinguish between coincidence and true customer patterns."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3743614,
     "sourceId": 6479792,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.787266,
   "end_time": "2025-07-04T08:17:19.426348",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-04T08:16:57.639082",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
