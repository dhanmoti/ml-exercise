{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "baa999cd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:28.323573Z",
     "iopub.status.busy": "2025-02-17T11:28:28.323036Z",
     "iopub.status.idle": "2025-02-17T11:28:29.400098Z",
     "shell.execute_reply": "2025-02-17T11:28:29.398704Z"
    },
    "papermill": {
     "duration": 1.090076,
     "end_time": "2025-02-17T11:28:29.402281",
     "exception": false,
     "start_time": "2025-02-17T11:28:28.312205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/credit-risk-dataset/credit_risk_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ae142ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:29.419485Z",
     "iopub.status.busy": "2025-02-17T11:28:29.419000Z",
     "iopub.status.idle": "2025-02-17T11:28:31.181310Z",
     "shell.execute_reply": "2025-02-17T11:28:31.180185Z"
    },
    "papermill": {
     "duration": 1.773118,
     "end_time": "2025-02-17T11:28:31.183546",
     "exception": false,
     "start_time": "2025-02-17T11:28:29.410428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f3569f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.201145Z",
     "iopub.status.busy": "2025-02-17T11:28:31.200637Z",
     "iopub.status.idle": "2025-02-17T11:28:31.304666Z",
     "shell.execute_reply": "2025-02-17T11:28:31.303289Z"
    },
    "papermill": {
     "duration": 0.115364,
     "end_time": "2025-02-17T11:28:31.307396",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.192032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# load data file\n",
    "df = pd.read_csv(\"/kaggle/input/credit-risk-dataset/credit_risk_dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "38df0575",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.336937Z",
     "iopub.status.busy": "2025-02-17T11:28:31.336357Z",
     "iopub.status.idle": "2025-02-17T11:28:31.379775Z",
     "shell.execute_reply": "2025-02-17T11:28:31.377657Z"
    },
    "papermill": {
     "duration": 0.061977,
     "end_time": "2025-02-17T11:28:31.382229",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.320252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_age</th>\n",
       "      <th>person_income</th>\n",
       "      <th>person_home_ownership</th>\n",
       "      <th>person_emp_length</th>\n",
       "      <th>loan_intent</th>\n",
       "      <th>loan_grade</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_int_rate</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>loan_percent_income</th>\n",
       "      <th>cb_person_default_on_file</th>\n",
       "      <th>cb_person_cred_hist_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>59000</td>\n",
       "      <td>RENT</td>\n",
       "      <td>123.0</td>\n",
       "      <td>PERSONAL</td>\n",
       "      <td>D</td>\n",
       "      <td>35000</td>\n",
       "      <td>16.02</td>\n",
       "      <td>1</td>\n",
       "      <td>0.59</td>\n",
       "      <td>Y</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21</td>\n",
       "      <td>9600</td>\n",
       "      <td>OWN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>EDUCATION</td>\n",
       "      <td>B</td>\n",
       "      <td>1000</td>\n",
       "      <td>11.14</td>\n",
       "      <td>0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>9600</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MEDICAL</td>\n",
       "      <td>C</td>\n",
       "      <td>5500</td>\n",
       "      <td>12.87</td>\n",
       "      <td>1</td>\n",
       "      <td>0.57</td>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23</td>\n",
       "      <td>65500</td>\n",
       "      <td>RENT</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MEDICAL</td>\n",
       "      <td>C</td>\n",
       "      <td>35000</td>\n",
       "      <td>15.23</td>\n",
       "      <td>1</td>\n",
       "      <td>0.53</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24</td>\n",
       "      <td>54400</td>\n",
       "      <td>RENT</td>\n",
       "      <td>8.0</td>\n",
       "      <td>MEDICAL</td>\n",
       "      <td>C</td>\n",
       "      <td>35000</td>\n",
       "      <td>14.27</td>\n",
       "      <td>1</td>\n",
       "      <td>0.55</td>\n",
       "      <td>Y</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>21</td>\n",
       "      <td>9900</td>\n",
       "      <td>OWN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>VENTURE</td>\n",
       "      <td>A</td>\n",
       "      <td>2500</td>\n",
       "      <td>7.14</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>26</td>\n",
       "      <td>77100</td>\n",
       "      <td>RENT</td>\n",
       "      <td>8.0</td>\n",
       "      <td>EDUCATION</td>\n",
       "      <td>B</td>\n",
       "      <td>35000</td>\n",
       "      <td>12.42</td>\n",
       "      <td>1</td>\n",
       "      <td>0.45</td>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>24</td>\n",
       "      <td>78956</td>\n",
       "      <td>RENT</td>\n",
       "      <td>5.0</td>\n",
       "      <td>MEDICAL</td>\n",
       "      <td>B</td>\n",
       "      <td>35000</td>\n",
       "      <td>11.11</td>\n",
       "      <td>1</td>\n",
       "      <td>0.44</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>24</td>\n",
       "      <td>83000</td>\n",
       "      <td>RENT</td>\n",
       "      <td>8.0</td>\n",
       "      <td>PERSONAL</td>\n",
       "      <td>A</td>\n",
       "      <td>35000</td>\n",
       "      <td>8.90</td>\n",
       "      <td>1</td>\n",
       "      <td>0.42</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21</td>\n",
       "      <td>10000</td>\n",
       "      <td>OWN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>VENTURE</td>\n",
       "      <td>D</td>\n",
       "      <td>1600</td>\n",
       "      <td>14.74</td>\n",
       "      <td>1</td>\n",
       "      <td>0.16</td>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   person_age  person_income person_home_ownership  person_emp_length  \\\n",
       "0          22          59000                  RENT              123.0   \n",
       "1          21           9600                   OWN                5.0   \n",
       "2          25           9600              MORTGAGE                1.0   \n",
       "3          23          65500                  RENT                4.0   \n",
       "4          24          54400                  RENT                8.0   \n",
       "5          21           9900                   OWN                2.0   \n",
       "6          26          77100                  RENT                8.0   \n",
       "7          24          78956                  RENT                5.0   \n",
       "8          24          83000                  RENT                8.0   \n",
       "9          21          10000                   OWN                6.0   \n",
       "\n",
       "  loan_intent loan_grade  loan_amnt  loan_int_rate  loan_status  \\\n",
       "0    PERSONAL          D      35000          16.02            1   \n",
       "1   EDUCATION          B       1000          11.14            0   \n",
       "2     MEDICAL          C       5500          12.87            1   \n",
       "3     MEDICAL          C      35000          15.23            1   \n",
       "4     MEDICAL          C      35000          14.27            1   \n",
       "5     VENTURE          A       2500           7.14            1   \n",
       "6   EDUCATION          B      35000          12.42            1   \n",
       "7     MEDICAL          B      35000          11.11            1   \n",
       "8    PERSONAL          A      35000           8.90            1   \n",
       "9     VENTURE          D       1600          14.74            1   \n",
       "\n",
       "   loan_percent_income cb_person_default_on_file  cb_person_cred_hist_length  \n",
       "0                 0.59                         Y                           3  \n",
       "1                 0.10                         N                           2  \n",
       "2                 0.57                         N                           3  \n",
       "3                 0.53                         N                           2  \n",
       "4                 0.55                         Y                           4  \n",
       "5                 0.25                         N                           2  \n",
       "6                 0.45                         N                           3  \n",
       "7                 0.44                         N                           4  \n",
       "8                 0.42                         N                           2  \n",
       "9                 0.16                         N                           3  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the first 5 rows of data. Column loan_status = 1 > default\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07bb7fde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.402037Z",
     "iopub.status.busy": "2025-02-17T11:28:31.401686Z",
     "iopub.status.idle": "2025-02-17T11:28:31.445072Z",
     "shell.execute_reply": "2025-02-17T11:28:31.443656Z"
    },
    "papermill": {
     "duration": 0.054549,
     "end_time": "2025-02-17T11:28:31.447216",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.392667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_age</th>\n",
       "      <th>person_income</th>\n",
       "      <th>person_home_ownership</th>\n",
       "      <th>person_emp_length</th>\n",
       "      <th>loan_intent</th>\n",
       "      <th>loan_grade</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_int_rate</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>loan_percent_income</th>\n",
       "      <th>cb_person_default_on_file</th>\n",
       "      <th>cb_person_cred_hist_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32576</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32577</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32578</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32579</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32580</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>28638 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       person_age  person_income  person_home_ownership  person_emp_length  \\\n",
       "0           False          False                  False              False   \n",
       "1           False          False                  False              False   \n",
       "2           False          False                  False              False   \n",
       "3           False          False                  False              False   \n",
       "4           False          False                  False              False   \n",
       "...           ...            ...                    ...                ...   \n",
       "32576       False          False                  False              False   \n",
       "32577       False          False                  False              False   \n",
       "32578       False          False                  False              False   \n",
       "32579       False          False                  False              False   \n",
       "32580       False          False                  False              False   \n",
       "\n",
       "       loan_intent  loan_grade  loan_amnt  loan_int_rate  loan_status  \\\n",
       "0            False       False      False          False        False   \n",
       "1            False       False      False          False        False   \n",
       "2            False       False      False          False        False   \n",
       "3            False       False      False          False        False   \n",
       "4            False       False      False          False        False   \n",
       "...            ...         ...        ...            ...          ...   \n",
       "32576        False       False      False          False        False   \n",
       "32577        False       False      False          False        False   \n",
       "32578        False       False      False          False        False   \n",
       "32579        False       False      False          False        False   \n",
       "32580        False       False      False          False        False   \n",
       "\n",
       "       loan_percent_income  cb_person_default_on_file  \\\n",
       "0                    False                      False   \n",
       "1                    False                      False   \n",
       "2                    False                      False   \n",
       "3                    False                      False   \n",
       "4                    False                      False   \n",
       "...                    ...                        ...   \n",
       "32576                False                      False   \n",
       "32577                False                      False   \n",
       "32578                False                      False   \n",
       "32579                False                      False   \n",
       "32580                False                      False   \n",
       "\n",
       "       cb_person_cred_hist_length  \n",
       "0                           False  \n",
       "1                           False  \n",
       "2                           False  \n",
       "3                           False  \n",
       "4                           False  \n",
       "...                           ...  \n",
       "32576                       False  \n",
       "32577                       False  \n",
       "32578                       False  \n",
       "32579                       False  \n",
       "32580                       False  \n",
       "\n",
       "[28638 rows x 12 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop Null values\n",
    "df = df.dropna()\n",
    "\n",
    "# Check for missing data\n",
    "missing_values = df.isnull()\n",
    "missing_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7897c06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.466138Z",
     "iopub.status.busy": "2025-02-17T11:28:31.465742Z",
     "iopub.status.idle": "2025-02-17T11:28:31.478703Z",
     "shell.execute_reply": "2025-02-17T11:28:31.477311Z"
    },
    "papermill": {
     "duration": 0.025161,
     "end_time": "2025-02-17T11:28:31.481088",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.455927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "797bd944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.510177Z",
     "iopub.status.busy": "2025-02-17T11:28:31.509776Z",
     "iopub.status.idle": "2025-02-17T11:28:31.573475Z",
     "shell.execute_reply": "2025-02-17T11:28:31.572225Z"
    },
    "papermill": {
     "duration": 0.077931,
     "end_time": "2025-02-17T11:28:31.576439",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.498508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_age</th>\n",
       "      <th>person_income</th>\n",
       "      <th>person_emp_length</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_int_rate</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>loan_percent_income</th>\n",
       "      <th>cb_person_cred_hist_length</th>\n",
       "      <th>person_home_ownership_OTHER</th>\n",
       "      <th>person_home_ownership_OWN</th>\n",
       "      <th>...</th>\n",
       "      <th>loan_intent_MEDICAL</th>\n",
       "      <th>loan_intent_PERSONAL</th>\n",
       "      <th>loan_intent_VENTURE</th>\n",
       "      <th>loan_grade_B</th>\n",
       "      <th>loan_grade_C</th>\n",
       "      <th>loan_grade_D</th>\n",
       "      <th>loan_grade_E</th>\n",
       "      <th>loan_grade_F</th>\n",
       "      <th>loan_grade_G</th>\n",
       "      <th>cb_person_default_on_file_Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>59000</td>\n",
       "      <td>123.0</td>\n",
       "      <td>35000</td>\n",
       "      <td>16.02</td>\n",
       "      <td>1</td>\n",
       "      <td>0.59</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21</td>\n",
       "      <td>9600</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>11.14</td>\n",
       "      <td>0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>9600</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5500</td>\n",
       "      <td>12.87</td>\n",
       "      <td>1</td>\n",
       "      <td>0.57</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23</td>\n",
       "      <td>65500</td>\n",
       "      <td>4.0</td>\n",
       "      <td>35000</td>\n",
       "      <td>15.23</td>\n",
       "      <td>1</td>\n",
       "      <td>0.53</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24</td>\n",
       "      <td>54400</td>\n",
       "      <td>8.0</td>\n",
       "      <td>35000</td>\n",
       "      <td>14.27</td>\n",
       "      <td>1</td>\n",
       "      <td>0.55</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   person_age  person_income  person_emp_length  loan_amnt  loan_int_rate  \\\n",
       "0          22          59000              123.0      35000          16.02   \n",
       "1          21           9600                5.0       1000          11.14   \n",
       "2          25           9600                1.0       5500          12.87   \n",
       "3          23          65500                4.0      35000          15.23   \n",
       "4          24          54400                8.0      35000          14.27   \n",
       "\n",
       "   loan_status  loan_percent_income  cb_person_cred_hist_length  \\\n",
       "0            1                 0.59                           3   \n",
       "1            0                 0.10                           2   \n",
       "2            1                 0.57                           3   \n",
       "3            1                 0.53                           2   \n",
       "4            1                 0.55                           4   \n",
       "\n",
       "   person_home_ownership_OTHER  person_home_ownership_OWN  ...  \\\n",
       "0                        False                      False  ...   \n",
       "1                        False                       True  ...   \n",
       "2                        False                      False  ...   \n",
       "3                        False                      False  ...   \n",
       "4                        False                      False  ...   \n",
       "\n",
       "   loan_intent_MEDICAL  loan_intent_PERSONAL  loan_intent_VENTURE  \\\n",
       "0                False                  True                False   \n",
       "1                False                 False                False   \n",
       "2                 True                 False                False   \n",
       "3                 True                 False                False   \n",
       "4                 True                 False                False   \n",
       "\n",
       "   loan_grade_B  loan_grade_C  loan_grade_D  loan_grade_E  loan_grade_F  \\\n",
       "0         False         False          True         False         False   \n",
       "1          True         False         False         False         False   \n",
       "2         False          True         False         False         False   \n",
       "3         False          True         False         False         False   \n",
       "4         False          True         False         False         False   \n",
       "\n",
       "   loan_grade_G  cb_person_default_on_file_Y  \n",
       "0         False                         True  \n",
       "1         False                        False  \n",
       "2         False                        False  \n",
       "3         False                        False  \n",
       "4         False                         True  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This data has categorical data such as ownership, load_intent, loan_grade, cb_person_default_on_file\n",
    "# One-Hot Encoding (pd.get_dummies)\n",
    "# Recommended when categorical values do not have a meaningful order (e.g., \"City: New York, London, Tokyo\").\n",
    "# Converts categories into binary columns.\n",
    "# So, we will covert ownership, load_intent, loan_grade, cb_person_default_on_file columns to one-hot encoding\n",
    "\n",
    "# ref: https://www.geeksforgeeks.org/ml-one-hot-encoding/\n",
    "\n",
    "# Identify categorical columns\n",
    "categorical_cols = df.select_dtypes(include=['object', 'category']).columns\n",
    "\n",
    "# One-Hot Encoding (Recommended for non-ordinal categorical variables)\n",
    "df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "381b888e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.602831Z",
     "iopub.status.busy": "2025-02-17T11:28:31.602066Z",
     "iopub.status.idle": "2025-02-17T11:28:31.642855Z",
     "shell.execute_reply": "2025-02-17T11:28:31.641835Z"
    },
    "papermill": {
     "duration": 0.057749,
     "end_time": "2025-02-17T11:28:31.645194",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.587445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scale numerical data\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "numerical_features = ['person_age', 'person_income', 'person_emp_length', 'loan_amnt', \n",
    "                      'loan_int_rate', 'loan_percent_income', 'cb_person_cred_hist_length']\n",
    "scaler = StandardScaler()\n",
    "df[numerical_features] = scaler.fit_transform(df[numerical_features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d1342cd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.668997Z",
     "iopub.status.busy": "2025-02-17T11:28:31.668616Z",
     "iopub.status.idle": "2025-02-17T11:28:31.699741Z",
     "shell.execute_reply": "2025-02-17T11:28:31.698286Z"
    },
    "papermill": {
     "duration": 0.046702,
     "end_time": "2025-02-17T11:28:31.701949",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.655247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_age</th>\n",
       "      <th>person_income</th>\n",
       "      <th>person_emp_length</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_int_rate</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>loan_percent_income</th>\n",
       "      <th>cb_person_cred_hist_length</th>\n",
       "      <th>person_home_ownership_OTHER</th>\n",
       "      <th>person_home_ownership_OWN</th>\n",
       "      <th>...</th>\n",
       "      <th>loan_intent_MEDICAL</th>\n",
       "      <th>loan_intent_PERSONAL</th>\n",
       "      <th>loan_intent_VENTURE</th>\n",
       "      <th>loan_grade_B</th>\n",
       "      <th>loan_grade_C</th>\n",
       "      <th>loan_grade_D</th>\n",
       "      <th>loan_grade_E</th>\n",
       "      <th>loan_grade_F</th>\n",
       "      <th>loan_grade_G</th>\n",
       "      <th>cb_person_default_on_file_Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.907594</td>\n",
       "      <td>-0.122674</td>\n",
       "      <td>28.453433</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.542164</td>\n",
       "      <td>1</td>\n",
       "      <td>3.952527</td>\n",
       "      <td>-0.691791</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.066064</td>\n",
       "      <td>-0.914907</td>\n",
       "      <td>0.050866</td>\n",
       "      <td>-1.367627</td>\n",
       "      <td>0.031008</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.653141</td>\n",
       "      <td>-0.939413</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.432183</td>\n",
       "      <td>-0.914907</td>\n",
       "      <td>-0.911932</td>\n",
       "      <td>-0.656678</td>\n",
       "      <td>0.566725</td>\n",
       "      <td>1</td>\n",
       "      <td>3.764540</td>\n",
       "      <td>-0.691791</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.749123</td>\n",
       "      <td>-0.018433</td>\n",
       "      <td>-0.189833</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.297530</td>\n",
       "      <td>1</td>\n",
       "      <td>3.388567</td>\n",
       "      <td>-0.939413</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.590653</td>\n",
       "      <td>-0.196445</td>\n",
       "      <td>0.772966</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.000253</td>\n",
       "      <td>1</td>\n",
       "      <td>3.576554</td>\n",
       "      <td>-0.444169</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   person_age  person_income  person_emp_length  loan_amnt  loan_int_rate  \\\n",
       "0   -0.907594      -0.122674          28.453433   4.003984       1.542164   \n",
       "1   -1.066064      -0.914907           0.050866  -1.367627       0.031008   \n",
       "2   -0.432183      -0.914907          -0.911932  -0.656678       0.566725   \n",
       "3   -0.749123      -0.018433          -0.189833   4.003984       1.297530   \n",
       "4   -0.590653      -0.196445           0.772966   4.003984       1.000253   \n",
       "\n",
       "   loan_status  loan_percent_income  cb_person_cred_hist_length  \\\n",
       "0            1             3.952527                   -0.691791   \n",
       "1            0            -0.653141                   -0.939413   \n",
       "2            1             3.764540                   -0.691791   \n",
       "3            1             3.388567                   -0.939413   \n",
       "4            1             3.576554                   -0.444169   \n",
       "\n",
       "   person_home_ownership_OTHER  person_home_ownership_OWN  ...  \\\n",
       "0                        False                      False  ...   \n",
       "1                        False                       True  ...   \n",
       "2                        False                      False  ...   \n",
       "3                        False                      False  ...   \n",
       "4                        False                      False  ...   \n",
       "\n",
       "   loan_intent_MEDICAL  loan_intent_PERSONAL  loan_intent_VENTURE  \\\n",
       "0                False                  True                False   \n",
       "1                False                 False                False   \n",
       "2                 True                 False                False   \n",
       "3                 True                 False                False   \n",
       "4                 True                 False                False   \n",
       "\n",
       "   loan_grade_B  loan_grade_C  loan_grade_D  loan_grade_E  loan_grade_F  \\\n",
       "0         False         False          True         False         False   \n",
       "1          True         False         False         False         False   \n",
       "2         False          True         False         False         False   \n",
       "3         False          True         False         False         False   \n",
       "4         False          True         False         False         False   \n",
       "\n",
       "   loan_grade_G  cb_person_default_on_file_Y  \n",
       "0         False                         True  \n",
       "1         False                        False  \n",
       "2         False                        False  \n",
       "3         False                        False  \n",
       "4         False                         True  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6896079e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.725151Z",
     "iopub.status.busy": "2025-02-17T11:28:31.724744Z",
     "iopub.status.idle": "2025-02-17T11:28:31.732111Z",
     "shell.execute_reply": "2025-02-17T11:28:31.730948Z"
    },
    "papermill": {
     "duration": 0.019958,
     "end_time": "2025-02-17T11:28:31.734217",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.714259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define independent variables (X) and target variable (y)\n",
    "# 'loan_status' is the column indicating default (1 = default, 0 = no default)\n",
    "X = df.drop(columns=['loan_status'])  # Drop the target column\n",
    "y = df['loan_status']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3b0cb93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.754369Z",
     "iopub.status.busy": "2025-02-17T11:28:31.754027Z",
     "iopub.status.idle": "2025-02-17T11:28:31.767926Z",
     "shell.execute_reply": "2025-02-17T11:28:31.766363Z"
    },
    "papermill": {
     "duration": 0.026077,
     "end_time": "2025-02-17T11:28:31.770139",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.744062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split data into 70-30 train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "74b0a350",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.789541Z",
     "iopub.status.busy": "2025-02-17T11:28:31.789100Z",
     "iopub.status.idle": "2025-02-17T11:28:31.970468Z",
     "shell.execute_reply": "2025-02-17T11:28:31.969205Z"
    },
    "papermill": {
     "duration": 0.193094,
     "end_time": "2025-02-17T11:28:31.972295",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.779201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=500)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train a logistic regression model\n",
    "model = LogisticRegression(max_iter=500)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7b7993a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:31.993476Z",
     "iopub.status.busy": "2025-02-17T11:28:31.993064Z",
     "iopub.status.idle": "2025-02-17T11:28:32.006339Z",
     "shell.execute_reply": "2025-02-17T11:28:32.005191Z"
    },
    "papermill": {
     "duration": 0.026799,
     "end_time": "2025-02-17T11:28:32.008627",
     "exception": false,
     "start_time": "2025-02-17T11:28:31.981828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8618482309124768"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluate Model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c391a4d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:32.029342Z",
     "iopub.status.busy": "2025-02-17T11:28:32.028937Z",
     "iopub.status.idle": "2025-02-17T11:28:32.904656Z",
     "shell.execute_reply": "2025-02-17T11:28:32.903190Z"
    },
    "papermill": {
     "duration": 0.888041,
     "end_time": "2025-02-17T11:28:32.906746",
     "exception": false,
     "start_time": "2025-02-17T11:28:32.018705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Example: Count plot of a categorical column\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.countplot(x=df['person_home_ownership_OWN'])\n",
    "plt.title('Home ownership Distribution')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e35cfcc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:32.928203Z",
     "iopub.status.busy": "2025-02-17T11:28:32.927601Z",
     "iopub.status.idle": "2025-02-17T11:28:33.210314Z",
     "shell.execute_reply": "2025-02-17T11:28:33.208871Z"
    },
    "papermill": {
     "duration": 0.29584,
     "end_time": "2025-02-17T11:28:33.212689",
     "exception": false,
     "start_time": "2025-02-17T11:28:32.916849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot (if you have two numerical columns)\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.scatterplot(x=df['person_income'], y=df['loan_status'])\n",
    "plt.title(\"Income vs Value\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2df1e066",
   "metadata": {
    "papermill": {
     "duration": 0.011845,
     "end_time": "2025-02-17T11:28:33.235346",
     "exception": false,
     "start_time": "2025-02-17T11:28:33.223501",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# From Week 3 sample code"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9711911f",
   "metadata": {
    "papermill": {
     "duration": 0.009764,
     "end_time": "2025-02-17T11:28:33.256576",
     "exception": false,
     "start_time": "2025-02-17T11:28:33.246812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Remove outliers in terms of person_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "92679b40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:33.278806Z",
     "iopub.status.busy": "2025-02-17T11:28:33.278354Z",
     "iopub.status.idle": "2025-02-17T11:28:33.874779Z",
     "shell.execute_reply": "2025-02-17T11:28:33.873641Z"
    },
    "papermill": {
     "duration": 0.60976,
     "end_time": "2025-02-17T11:28:33.876721",
     "exception": false,
     "start_time": "2025-02-17T11:28:33.266961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Copy original data to preserve it for \"before\" plot\n",
    "df_before = df.copy()\n",
    "\n",
    "# Identify outliers: person_age >= 120 \n",
    "outlier_indices = df_before[df_before['person_age'] >= 120].index\n",
    "\n",
    "# Remove those outliers to create 'after' set\n",
    "df_after = df_before.drop(outlier_indices)\n",
    "\n",
    "# Create a 1x2 subplot\n",
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 3))\n",
    "\n",
    "# -- Plot 1: Before Outlier Removal\n",
    "axes[0].scatter(df_before['person_age'], \n",
    "                df_before['loan_int_rate'], \n",
    "                alpha=0.5, \n",
    "                color='blue')\n",
    "axes[0].set_title('Before Outlier Removal')\n",
    "axes[0].set_xlabel('Age')\n",
    "axes[0].set_ylabel('Loan Interest Rate (%)')\n",
    "axes[0].grid(True)\n",
    "\n",
    "# -- Plot 2: After Outlier Removal\n",
    "axes[1].scatter(df_after['person_age'], \n",
    "                df_after['loan_int_rate'], \n",
    "                alpha=0.5, \n",
    "                color='blue')\n",
    "axes[1].set_title('After Outlier Removal')\n",
    "axes[1].set_xlabel('Age')\n",
    "axes[1].set_ylabel('Loan Interest Rate (%)')\n",
    "axes[1].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9feee547",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:33.901338Z",
     "iopub.status.busy": "2025-02-17T11:28:33.900970Z",
     "iopub.status.idle": "2025-02-17T11:28:34.590155Z",
     "shell.execute_reply": "2025-02-17T11:28:34.589065Z"
    },
    "papermill": {
     "duration": 0.703463,
     "end_time": "2025-02-17T11:28:34.592091",
     "exception": false,
     "start_time": "2025-02-17T11:28:33.888628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_before_2 = df_after.copy()\n",
    "\n",
    "# Identify outliers: person_age >= 120 \n",
    "outlier_indices = df_before_2[df_before_2['person_income'] >= 150000].index\n",
    "\n",
    "# Remove those outliers to create 'after' set\n",
    "df_after = df_after.drop(outlier_indices)\n",
    "\n",
    "# Create a 1x2 subplot\n",
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 3))\n",
    "\n",
    "# -- Plot 3: Before Outlier Removal\n",
    "axes[0].scatter(df_before['person_income'], \n",
    "                df_before['loan_int_rate'], \n",
    "                alpha=0.5, \n",
    "                color='blue')\n",
    "axes[0].set_title('Before Outlier Removal')\n",
    "axes[0].set_xlabel('Income')\n",
    "axes[0].set_ylabel('Loan Interest Rate (%)')\n",
    "axes[0].grid(True)\n",
    "\n",
    "# -- Plot 4: After Outlier Removal - income\n",
    "axes[1].scatter(df_after['person_income'], \n",
    "                df_after['loan_int_rate'], \n",
    "                alpha=0.5, \n",
    "                color='blue')\n",
    "axes[1].set_title('After Outlier Removal')\n",
    "axes[1].set_xlabel('Income')\n",
    "axes[1].set_ylabel('Loan Interest Rate (%)')\n",
    "axes[1].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "04c143e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.621038Z",
     "iopub.status.busy": "2025-02-17T11:28:34.620679Z",
     "iopub.status.idle": "2025-02-17T11:28:34.643353Z",
     "shell.execute_reply": "2025-02-17T11:28:34.642213Z"
    },
    "papermill": {
     "duration": 0.038342,
     "end_time": "2025-02-17T11:28:34.645100",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.606758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person_age</th>\n",
       "      <th>person_income</th>\n",
       "      <th>person_emp_length</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_int_rate</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>loan_percent_income</th>\n",
       "      <th>cb_person_cred_hist_length</th>\n",
       "      <th>person_home_ownership_OTHER</th>\n",
       "      <th>person_home_ownership_OWN</th>\n",
       "      <th>...</th>\n",
       "      <th>loan_intent_MEDICAL</th>\n",
       "      <th>loan_intent_PERSONAL</th>\n",
       "      <th>loan_intent_VENTURE</th>\n",
       "      <th>loan_grade_B</th>\n",
       "      <th>loan_grade_C</th>\n",
       "      <th>loan_grade_D</th>\n",
       "      <th>loan_grade_E</th>\n",
       "      <th>loan_grade_F</th>\n",
       "      <th>loan_grade_G</th>\n",
       "      <th>cb_person_default_on_file_Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.907594</td>\n",
       "      <td>-0.122674</td>\n",
       "      <td>28.453433</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.542164</td>\n",
       "      <td>1</td>\n",
       "      <td>3.952527</td>\n",
       "      <td>-0.691791</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.066064</td>\n",
       "      <td>-0.914907</td>\n",
       "      <td>0.050866</td>\n",
       "      <td>-1.367627</td>\n",
       "      <td>0.031008</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.653141</td>\n",
       "      <td>-0.939413</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.432183</td>\n",
       "      <td>-0.914907</td>\n",
       "      <td>-0.911932</td>\n",
       "      <td>-0.656678</td>\n",
       "      <td>0.566725</td>\n",
       "      <td>1</td>\n",
       "      <td>3.764540</td>\n",
       "      <td>-0.691791</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.749123</td>\n",
       "      <td>-0.018433</td>\n",
       "      <td>-0.189833</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.297530</td>\n",
       "      <td>1</td>\n",
       "      <td>3.388567</td>\n",
       "      <td>-0.939413</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.590653</td>\n",
       "      <td>-0.196445</td>\n",
       "      <td>0.772966</td>\n",
       "      <td>4.003984</td>\n",
       "      <td>1.000253</td>\n",
       "      <td>1</td>\n",
       "      <td>3.576554</td>\n",
       "      <td>-0.444169</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   person_age  person_income  person_emp_length  loan_amnt  loan_int_rate  \\\n",
       "0   -0.907594      -0.122674          28.453433   4.003984       1.542164   \n",
       "1   -1.066064      -0.914907           0.050866  -1.367627       0.031008   \n",
       "2   -0.432183      -0.914907          -0.911932  -0.656678       0.566725   \n",
       "3   -0.749123      -0.018433          -0.189833   4.003984       1.297530   \n",
       "4   -0.590653      -0.196445           0.772966   4.003984       1.000253   \n",
       "\n",
       "   loan_status  loan_percent_income  cb_person_cred_hist_length  \\\n",
       "0            1             3.952527                   -0.691791   \n",
       "1            0            -0.653141                   -0.939413   \n",
       "2            1             3.764540                   -0.691791   \n",
       "3            1             3.388567                   -0.939413   \n",
       "4            1             3.576554                   -0.444169   \n",
       "\n",
       "   person_home_ownership_OTHER  person_home_ownership_OWN  ...  \\\n",
       "0                        False                      False  ...   \n",
       "1                        False                       True  ...   \n",
       "2                        False                      False  ...   \n",
       "3                        False                      False  ...   \n",
       "4                        False                      False  ...   \n",
       "\n",
       "   loan_intent_MEDICAL  loan_intent_PERSONAL  loan_intent_VENTURE  \\\n",
       "0                False                  True                False   \n",
       "1                False                 False                False   \n",
       "2                 True                 False                False   \n",
       "3                 True                 False                False   \n",
       "4                 True                 False                False   \n",
       "\n",
       "   loan_grade_B  loan_grade_C  loan_grade_D  loan_grade_E  loan_grade_F  \\\n",
       "0         False         False          True         False         False   \n",
       "1          True         False         False         False         False   \n",
       "2         False          True         False         False         False   \n",
       "3         False          True         False         False         False   \n",
       "4         False          True         False         False         False   \n",
       "\n",
       "   loan_grade_G  cb_person_default_on_file_Y  \n",
       "0         False                         True  \n",
       "1         False                        False  \n",
       "2         False                        False  \n",
       "3         False                        False  \n",
       "4         False                         True  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df_after\n",
    "# categorical cols are already converted using one hot encoding\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c0cac047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.671139Z",
     "iopub.status.busy": "2025-02-17T11:28:34.670800Z",
     "iopub.status.idle": "2025-02-17T11:28:34.676806Z",
     "shell.execute_reply": "2025-02-17T11:28:34.675642Z"
    },
    "papermill": {
     "duration": 0.020825,
     "end_time": "2025-02-17T11:28:34.678477",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.657652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define independent variables (X) and target variable (y)\n",
    "# 'loan_status' is the column indicating default (1 = default, 0 = no default)\n",
    "X = df.drop(columns=['loan_status'])  # Drop the target column\n",
    "y = df['loan_status']  # Target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b925b815",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.705760Z",
     "iopub.status.busy": "2025-02-17T11:28:34.705381Z",
     "iopub.status.idle": "2025-02-17T11:28:34.714774Z",
     "shell.execute_reply": "2025-02-17T11:28:34.713745Z"
    },
    "papermill": {
     "duration": 0.025785,
     "end_time": "2025-02-17T11:28:34.716841",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.691056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split data into 70-30 train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "55b4fc93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.744124Z",
     "iopub.status.busy": "2025-02-17T11:28:34.743784Z",
     "iopub.status.idle": "2025-02-17T11:28:34.898864Z",
     "shell.execute_reply": "2025-02-17T11:28:34.897721Z"
    },
    "papermill": {
     "duration": 0.170423,
     "end_time": "2025-02-17T11:28:34.900633",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.730210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=500)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train a logistic regression model\n",
    "model = LogisticRegression(max_iter=500)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "09ec2f04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.930074Z",
     "iopub.status.busy": "2025-02-17T11:28:34.929728Z",
     "iopub.status.idle": "2025-02-17T11:28:34.940807Z",
     "shell.execute_reply": "2025-02-17T11:28:34.939655Z"
    },
    "papermill": {
     "duration": 0.02711,
     "end_time": "2025-02-17T11:28:34.942932",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.915822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Predict\n",
    "y_pred = model.predict(X_test)\n",
    "y_pred_proba = model.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7e867194",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:34.970078Z",
     "iopub.status.busy": "2025-02-17T11:28:34.969707Z",
     "iopub.status.idle": "2025-02-17T11:28:34.974496Z",
     "shell.execute_reply": "2025-02-17T11:28:34.973315Z"
    },
    "papermill": {
     "duration": 0.020385,
     "end_time": "2025-02-17T11:28:34.976385",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.956000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import (\n",
    "    accuracy_score,\n",
    "    precision_score,\n",
    "    recall_score,\n",
    "    f1_score,\n",
    "    confusion_matrix,\n",
    "    roc_curve,\n",
    "    auc,\n",
    "    classification_report\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e47151c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.004721Z",
     "iopub.status.busy": "2025-02-17T11:28:35.004248Z",
     "iopub.status.idle": "2025-02-17T11:28:35.030164Z",
     "shell.execute_reply": "2025-02-17T11:28:35.028755Z"
    },
    "papermill": {
     "duration": 0.041612,
     "end_time": "2025-02-17T11:28:35.032294",
     "exception": false,
     "start_time": "2025-02-17T11:28:34.990682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Evaluation Metrics:\n",
      "Accuracy : 0.8618\n",
      "Precision: 0.7575\n",
      "Recall   : 0.5408\n",
      "F1 Score : 0.6310\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "\n",
    "print(\"Model Evaluation Metrics:\")\n",
    "print(f\"Accuracy : {accuracy:.4f}\")\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "print(f\"Recall   : {recall:.4f}\")\n",
    "print(f\"F1 Score : {f1:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cb9f727d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.059265Z",
     "iopub.status.busy": "2025-02-17T11:28:35.058878Z",
     "iopub.status.idle": "2025-02-17T11:28:35.305080Z",
     "shell.execute_reply": "2025-02-17T11:28:35.302956Z"
    },
    "papermill": {
     "duration": 0.26231,
     "end_time": "2025-02-17T11:28:35.307371",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.045061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', \n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'], \n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b21bebed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.344699Z",
     "iopub.status.busy": "2025-02-17T11:28:35.344271Z",
     "iopub.status.idle": "2025-02-17T11:28:35.371599Z",
     "shell.execute_reply": "2025-02-17T11:28:35.370281Z"
    },
    "papermill": {
     "duration": 0.046018,
     "end_time": "2025-02-17T11:28:35.374015",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.327997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.95      0.92      6715\n",
      "           1       0.76      0.54      0.63      1877\n",
      "\n",
      "    accuracy                           0.86      8592\n",
      "   macro avg       0.82      0.75      0.77      8592\n",
      "weighted avg       0.85      0.86      0.85      8592\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification report for detailed metrics\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879a23a2",
   "metadata": {
    "papermill": {
     "duration": 0.013187,
     "end_time": "2025-02-17T11:28:35.407933",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.394746",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Set threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0d0efb28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.437702Z",
     "iopub.status.busy": "2025-02-17T11:28:35.437295Z",
     "iopub.status.idle": "2025-02-17T11:28:35.461970Z",
     "shell.execute_reply": "2025-02-17T11:28:35.460838Z"
    },
    "papermill": {
     "duration": 0.041393,
     "end_time": "2025-02-17T11:28:35.464107",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.422714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performance Metrics at Threshold = 0.79:\n",
      "Accuracy : 0.8273\n",
      "Precision: 0.8729\n",
      "Recall   : 0.2451\n",
      "F1 Score : 0.3827\n"
     ]
    }
   ],
   "source": [
    "# Example of threshold impact on predictions\n",
    "threshold = 0.79\n",
    "y_pred_threshold = (y_pred_proba >= threshold).astype(int)\n",
    "\n",
    "# Evaluate performance at the chosen threshold\n",
    "accuracy = accuracy_score(y_test, y_pred_threshold)\n",
    "precision = precision_score(y_test, y_pred_threshold)\n",
    "recall = recall_score(y_test, y_pred_threshold)\n",
    "f1 = f1_score(y_test, y_pred_threshold)\n",
    "\n",
    "print(f\"Performance Metrics at Threshold = {threshold}:\")\n",
    "print(f\"Accuracy : {accuracy:.4f}\")\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "print(f\"Recall   : {recall:.4f}\")\n",
    "print(f\"F1 Score : {f1:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b15f0293",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.496583Z",
     "iopub.status.busy": "2025-02-17T11:28:35.496084Z",
     "iopub.status.idle": "2025-02-17T11:28:35.824362Z",
     "shell.execute_reply": "2025-02-17T11:28:35.823123Z"
    },
    "papermill": {
     "duration": 0.348469,
     "end_time": "2025-02-17T11:28:35.826467",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.477998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROC Curve and AUC\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.4f})')\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "\n",
    "# Define the thresholds you want to highlight\n",
    "desired_thresholds = [0.3, 0.5, 0.7]\n",
    "\n",
    "# Function to find the closest threshold\n",
    "def find_closest_threshold(thresholds, desired_thresh):\n",
    "    idx = np.argmin(np.abs(thresholds - desired_thresh))\n",
    "    return idx\n",
    "\n",
    "# Highlight specific threshold points\n",
    "for thresh in desired_thresholds:\n",
    "    idx = find_closest_threshold(thresholds, thresh)\n",
    "    plt.scatter(fpr[idx], tpr[idx], label=f'Threshold ≈ {thresholds[idx]:.2f}', marker='o')\n",
    "\n",
    "plt.xlim([-0.01, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7b7f1e1",
   "metadata": {
    "papermill": {
     "duration": 0.014781,
     "end_time": "2025-02-17T11:28:35.856400",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.841619",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Explore advanced models - xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "418f1c36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:35.888034Z",
     "iopub.status.busy": "2025-02-17T11:28:35.887679Z",
     "iopub.status.idle": "2025-02-17T11:28:36.171018Z",
     "shell.execute_reply": "2025-02-17T11:28:36.169840Z"
    },
    "papermill": {
     "duration": 0.301493,
     "end_time": "2025-02-17T11:28:36.173204",
     "exception": false,
     "start_time": "2025-02-17T11:28:35.871711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9cd3807d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:36.205634Z",
     "iopub.status.busy": "2025-02-17T11:28:36.205122Z",
     "iopub.status.idle": "2025-02-17T11:28:36.593233Z",
     "shell.execute_reply": "2025-02-17T11:28:36.591990Z"
    },
    "papermill": {
     "duration": 0.407273,
     "end_time": "2025-02-17T11:28:36.595325",
     "exception": false,
     "start_time": "2025-02-17T11:28:36.188052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6c9f3d2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:36.626434Z",
     "iopub.status.busy": "2025-02-17T11:28:36.626090Z",
     "iopub.status.idle": "2025-02-17T11:28:39.286035Z",
     "shell.execute_reply": "2025-02-17T11:28:39.284839Z"
    },
    "papermill": {
     "duration": 2.678228,
     "end_time": "2025-02-17T11:28:39.288426",
     "exception": false,
     "start_time": "2025-02-17T11:28:36.610198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train Random Forest Model\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "y_pred_rf = rf_model.predict(X_test)\n",
    "y_prob_rf = rf_model.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f41f5e08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:39.320892Z",
     "iopub.status.busy": "2025-02-17T11:28:39.320330Z",
     "iopub.status.idle": "2025-02-17T11:28:39.563857Z",
     "shell.execute_reply": "2025-02-17T11:28:39.562958Z"
    },
    "papermill": {
     "duration": 0.262348,
     "end_time": "2025-02-17T11:28:39.566076",
     "exception": false,
     "start_time": "2025-02-17T11:28:39.303728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train XGBoost Model\n",
    "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42, \n",
    "                          n_estimators=50, max_depth=3, learning_rate=0.1)\n",
    "xgb_model.fit(X_train, y_train)\n",
    "y_pred_xgb = xgb_model.predict(X_test)\n",
    "y_prob_xgb = xgb_model.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "836aeceb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:39.599645Z",
     "iopub.status.busy": "2025-02-17T11:28:39.599225Z",
     "iopub.status.idle": "2025-02-17T11:28:39.648565Z",
     "shell.execute_reply": "2025-02-17T11:28:39.647259Z"
    },
    "papermill": {
     "duration": 0.066957,
     "end_time": "2025-02-17T11:28:39.650428",
     "exception": false,
     "start_time": "2025-02-17T11:28:39.583471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest: {'Accuracy': 0.9283054003724395, 'Precision': 0.9462137296532201, 'Recall': 0.7123068726691529, 'F1 Score': 0.8127659574468085, 'ROC-AUC': 0.928113095349076}\n",
      "XGBoost: {'Accuracy': 0.9088687150837989, 'Precision': 0.8958031837916064, 'Recall': 0.6595631326584976, 'F1 Score': 0.7597422522246087, 'ROC-AUC': 0.9128156375071357}\n"
     ]
    }
   ],
   "source": [
    "# Function to evaluate models\n",
    "def evaluate_model(y_test, y_pred, y_prob):\n",
    "    return {\n",
    "        \"Accuracy\": accuracy_score(y_test, y_pred),\n",
    "        \"Precision\": precision_score(y_test, y_pred),\n",
    "        \"Recall\": recall_score(y_test, y_pred),\n",
    "        \"F1 Score\": f1_score(y_test, y_pred),\n",
    "        \"ROC-AUC\": roc_auc_score(y_test, y_prob)\n",
    "    }\n",
    "\n",
    "# Get results\n",
    "# log_results = evaluate_model(y_test, y_pred_log, y_prob_log)\n",
    "rf_results = evaluate_model(y_test, y_pred_rf, y_prob_rf)\n",
    "xgb_results = evaluate_model(y_test, y_pred_xgb, y_prob_xgb)\n",
    "\n",
    "# Print results\n",
    "# print(\"Logistic Regression:\", log_results)\n",
    "print(\"Random Forest:\", rf_results)\n",
    "print(\"XGBoost:\", xgb_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f6a09c88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-17T11:28:39.681653Z",
     "iopub.status.busy": "2025-02-17T11:28:39.681250Z",
     "iopub.status.idle": "2025-02-17T11:28:39.685722Z",
     "shell.execute_reply": "2025-02-17T11:28:39.684441Z"
    },
    "papermill": {
     "duration": 0.021895,
     "end_time": "2025-02-17T11:28:39.687289",
     "exception": false,
     "start_time": "2025-02-17T11:28:39.665394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# highlight usage, pros and cons\n",
    "# evulate models based on its types\n",
    "# issues of given data\n",
    "# discuss each materic that we use to measure model performance\n",
    "# depends on domain and nature of business. disucss which materic\n",
    "# feature importance graph\n",
    "# present roc of all models in one place. summary tables.\n",
    "# insights and highlevel results\n",
    "# python package to run all the models"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 688532,
     "sourceId": 1207035,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.275014,
   "end_time": "2025-02-17T11:28:40.524917",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-17T11:28:25.249903",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
